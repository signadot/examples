apiVersion: v1
kind: ServiceAccount
metadata:
  name: consumer
  namespace: kafka-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer
  namespace: kafka-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      serviceAccountName: consumer
      enableServiceLinks: false
      containers:
        - name: consumer
          image: signadot/kafka-demo:latest
          command:
            - "npm"
            - "run"
            - "consumer"
          env:
            - name: BASELINE_NAME
              value: "consumer"
            - name: KAFKAJS_NO_PARTITIONER_WARNING
              value: "1"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 40001
          securityContext:
            # Run with the "node" user
            runAsUser: 1000
            runAsGroup: 1000
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend
  namespace: kafka-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: kafka-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
      annotations:
        sidecar.signadot.com/inject: "true"
    spec:
      serviceAccountName: frontend
      enableServiceLinks: false
      containers:
        - name: frontend
          image: signadot/kafka-demo:latest
          command:
            - "npm"
            - "run"
            - "frontend"
          env:
            - name: FRONTEND_PORT
              value: "40000"
            - name: BASELINE_NAME
              value: "frontend"
            - name: KAFKAJS_NO_PARTITIONER_WARNING
              value: "1"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 40000
          securityContext:
            # Run with the "node" user
            runAsUser: 1000
            runAsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: kafka-demo
  labels:
    app: frontend
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
    - port: 4000
      targetPort: 40000
      name: http
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka
  namespace: kafka-demo
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka-headless
  namespace: kafka-demo
spec:
  clusterIP: None
  clusterIPs:
    - None
  ports:
    - name: tcp-kafka-int
      port: 9092
      protocol: TCP
      targetPort: tcp-kafka-int
    - name: tcp-kafka-ctrl
      port: 29093
      protocol: TCP
      targetPort: tcp-kafka-ctrl
  selector:
    app: kafka
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: kafka
  name: kafka
  namespace: kafka-demo
spec:
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kafka
  serviceName: kafka-headless
  template:
    metadata:
      labels:
        app: kafka
    spec:
      serviceAccountName: kafka
      enableServiceLinks: false
      containers:
        - command:
            - sh
            - -exc
            - |
              export CLUSTER_ID="2dd8oDpjQRGlRWObUIROyQ" && \
              export KAFKA_NODE_ID=${HOSTNAME##*-} 
              export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.kafka-headless.kafka-demo.svc.cluster.local:9092
              export KAFKA_CONTROLLER_QUORUM_VOTERS="0@kafka-0.kafka-headless.kafka-demo.svc.cluster.local:29093" 

              exec /etc/confluent/docker/run
          env:
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: "CONTROLLER"
            - name: KAFKA_LISTENERS
              value: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          name: kafka
          image: docker.io/confluentinc/confluent-local:7.5.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
              name: tcp-kafka-int
              protocol: TCP
            - containerPort: 29093
              name: tcp-kafka-ctrl
              protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 1400Mi
            requests:
              cpu: 250m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 1000
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/kafka
              name: config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 30
      volumes:
        - emptyDir: {}
          name: config
  updateStrategy:
    type: RollingUpdate
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: producer
  namespace: kafka-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: producer
  namespace: kafka-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: producer
  template:
    metadata:
      labels:
        app: producer
      annotations:
        sidecar.signadot.com/inject: "true"
    spec:
      serviceAccountName: producer
      enableServiceLinks: false
      containers:
        - name: producer
          image: signadot/kafka-demo:latest
          command:
            - "npm"
            - "run"
            - "producer"
          env:
            - name: PRODUCER_PORT
              value: "40001"
            - name: BASELINE_NAME
              value: "producer"
            - name: KAFKAJS_NO_PARTITIONER_WARNING
              value: "1"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 40001
          securityContext:
            # Run with the "node" user
            runAsUser: 1000
            runAsGroup: 1000
---
apiVersion: v1
kind: Service
metadata:
  name: producer
  namespace: kafka-demo
  labels:
    app: producer
spec:
  type: ClusterIP
  selector:
    app: producer
  ports:
    - port: 4001
      targetPort: 40001
      name: http
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis
  namespace: kafka-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: kafka-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      serviceAccountName: redis
      containers:
        - name: redis
          image: redis:7.2.3
          ports:
            - containerPort: 6379
          resources:
            limits:
              cpu: "0.1"
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: kafka-demo
  labels:
    app: redis
spec:
  type: ClusterIP
  selector:
    app: redis
  ports:
    - port: 6379
      name: redis
---
