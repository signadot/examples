apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  # namespace: your-namespace # Optional: Uncomment and specify if deploying to a specific namespace
  labels:
    app: elasticsearch
spec:
  replicas: 1 # Matches discovery.type=single-node
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      # Elasticsearch might require a higher vm.max_map_count.
      # On some Kubernetes environments, you might need an initContainer like this:
      # initContainers:
      # - name: set-vm-max-map-count
      #   image: busybox:1.35
      #   command: ["sysctl", "-w", "vm.max_map_count=262144"]
      #   securityContext:
      #     privileged: true # Requires appropriate permissions on the K8s cluster
      containers:
        - name: elasticsearch
          # IMPORTANT: Replace 'elasticsearch:7.17.0' with the specific version
          # matching ${ELASTICSEARCH_VERSION} from your .env file or compose setup.
          # e.g., if ELASTICSEARCH_VERSION=7.10.2, use image: elasticsearch:7.10.2
          image: elasticsearch:7.17.27
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9200
              name: http # For HTTP API
            - containerPort: 9300
              name: transport # For inter-node communication (though single-node here)
          env:
            - name: cluster.name
              value: "temporal-es-cluster" # A descriptive name for your ES cluster
            - name: node.name
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name # Makes node name dynamic based on pod name
            - name: discovery.type
              value: "single-node" # As per your docker-compose
            - name: ES_JAVA_OPTS
              value: "-Xms256m -Xmx256m" # As per your docker-compose
            - name: xpack.security.enabled
              value: "false" # As per your docker-compose
            - name: cluster.routing.allocation.disk.threshold_enabled
              value: "true"
            - name: cluster.routing.allocation.disk.watermark.low
              value: "512mb"
            - name: cluster.routing.allocation.disk.watermark.high
              value: "256mb"
            - name: cluster.routing.allocation.disk.watermark.flood_stage
              value: "128mb"
          # It's highly recommended to set resource requests and limits in production.
          # The memory request should be higher than ES_JAVA_OPTS Xmx.
          # resources:
          #   requests:
          #     memory: "512Mi"
          #     cpu: "500m" # 0.5 CPU core
          #   limits:
          #     memory: "1Gi"
          #     cpu: "1" # 1 CPU core
          readinessProbe:
            httpGet:
              path: /_cluster/health?local=true # Checks if the local node is ready
              port: http
            initialDelaySeconds: 30 # Time to wait before first probe
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /_cluster/health?local=true
              port: http
            initialDelaySeconds: 90 # Longer delay for liveness to allow full startup
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 5

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch # This name will be used by other services (e.g., Temporal server) to connect
  # namespace: your-namespace # Optional: Uncomment and specify if deploying to a specific namespace
  labels:
    app: elasticsearch
spec:
  type: ClusterIP # Exposes the service on a cluster-internal IP. This is the default.
  ports:
    - port: 9200       # Port the service will listen on
      targetPort: http # Refers to the 'name: http' on the container port in the Deployment
      protocol: TCP
      name: http-es
    # You might also expose 9300 if needed for specific client libraries or tools,
    # but for Temporal's ES_SEEDS=elasticsearch (which implies HTTP), 9200 is primary.
    # - port: 9300
    #   targetPort: transport
  selector:
    app: elasticsearch # Selects pods with label app=elasticsearch